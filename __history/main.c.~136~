#include <16F877A.h>
#device ADC=10   // 10-bit ADC
#FUSES NOWDT, PUT, NOBROWNOUT, NOLVP, HS   // HS for 20 MHz crystal
#use delay(crystal=20MHz)

// ---- Hardware connections ----
#bit SERVO   = 0x08.0   // RD0 - Servo
#bit BUTTON  = 0x08.3   // RD3 - Push button
#bit FAN     = 0x08.2   // RD2 - Fan
#bit SWITCH1 = 0x08.1   // RD1 - Manual fan switch
#bit LED_GREEN  = 0x08.4   // RD4
#bit LED_YELLOW = 0x08.5   // RD5
#bit LED_RED    = 0x08.6   // RD6
#bit BUZZER     = 0x08.7   // RD7

// ---- LCD connections ----
#define LCD_ENABLE_PIN  PIN_B2
#define LCD_RS_PIN      PIN_B0
#define LCD_RW_PIN      PIN_B1
#define LCD_DATA4       PIN_B4
#define LCD_DATA5       PIN_B5
#define LCD_DATA6       PIN_B6
#define LCD_DATA7       PIN_B7
#include <lcd.c>

// ---- DHT11 Pin ----
#define DHT11_PIN PIN_C0   // DHT11 connected to RC0

// ---- Function prototypes ----
short dht11_read_data(unsigned int8 *data);
void dht11_start();
int1 dht11_check_response();
unsigned int8 dht11_read_byte();
void servo_set_angle(int angle);

// ---- Servo PWM function ----
void servo_set_angle(int angle) {
   int16 pulse_width;
   pulse_width = 1000 + ((int32)angle * 1000) / 180; // 1-2ms
   SERVO = 1;
   delay_us(pulse_width);
   SERVO = 0;
   delay_us(20000 - pulse_width);
}

// ---- Main program ----
void main() {
   // ---- PIC Setup ----
   set_tris_d(0b00001010);   // RD1 & RD3 inputs, others outputs
   setup_adc_ports(ALL_ANALOG);
   setup_adc(ADC_CLOCK_INTERNAL);

   lcd_init();
   lcd_putc("\fMICRO PROJECT");
   lcd_gotoxy(1,2); lcd_putc("EIOT SYSTEM");
   delay_ms(1000);
   lcd_putc("\fAir Quality");
   lcd_gotoxy(1,2); lcd_putc("Monitor System");
   delay_ms(1000);

   int servo_angle = 0;
   int16 mq135=0, pm25=0;
   float mq_voltage=0, mq_ppm=0;
   unsigned int8 dht_data[5], RH_int=0, RH_dec=0, T_int=0, T_dec=0;
   int fan_status=0, air_status=0, buzzer_status=0;

   // Initial states
   FAN=0; SERVO=0; BUZZER=0;
   LED_GREEN=0; LED_YELLOW=0; LED_RED=0;

   while(TRUE) {
      // ---- Manual Servo Control ----
      servo_angle = BUTTON ? 90 : 0;

      // ---- Read MQ135 ----
      set_adc_channel(0); delay_us(20);
      mq135 = read_adc();
      mq_voltage = (mq135 * 5.0)/1023.0;
      mq_ppm = mq_voltage * 200.0;

      // ---- Read PM2.5 ----
      set_adc_channel(1); delay_us(20);
      pm25 = read_adc();

      // ---- Read DHT11 ----
      if(dht11_read_data(dht_data)) {
         RH_int=dht_data[0]; RH_dec=dht_data[1];
         T_int=dht_data[2]; T_dec=dht_data[3];
      } else {
         RH_int=RH_dec=T_int=T_dec=0;
      }

      // ---- Air Quality Status ----
      if(mq135<300 && pm25<300 && T_int<30) air_status=0;      // GOOD
      else if(mq135<700 && pm25<700 && T_int<40) air_status=1; // MODERATE
      else air_status=2;                                      // BAD

      // ---- Control LEDs, Fan, Buzzer ----
      LED_GREEN=(air_status==0);
      LED_YELLOW=(air_status==1);
      LED_RED=(air_status==2);
      FAN=(air_status==2) ? 1 : 0;
      buzzer_status=(air_status==2) ? 1 : 0;
      BUZZER=buzzer_status;

      // Manual fan override
      if(SWITCH1) FAN=1;

      // ---- Force servo open for BAD air ----
      if(air_status==2) servo_angle=90;

      // ---- LCD Display ----
      lcd_putc("\fMQ135 : ");
      printf(lcd_putc,"%lu",mq135);
      lcd_gotoxy(1,2);
      printf(lcd_putc,"PPM : %.2f",mq_ppm);
      servo_set_angle(servo_angle);

      lcd_putc("\fPM2.5 : ");
      printf(lcd_putc,"%lu",pm25);
      lcd_gotoxy(1,2);
      printf(lcd_putc,"VOLT: %.2f",(pm25*5.0)/1023.0);
      servo_set_angle(servo_angle);

      lcd_putc("\fTEMP : %u.%u",T_int,T_dec);
      lcd_putc(223); lcd_putc('C');
      lcd_gotoxy(1,2);
      printf(lcd_putc,"HUM : %u.%u%%",RH_int,RH_dec);
      servo_set_angle(servo_angle);

      lcd_putc("\fAir Status :");
      lcd_gotoxy(1,2);
      if(air_status==0) lcd_putc("GOOD");
      else if(air_status==1) lcd_putc("MODERATE");
      else lcd_putc("BAD!!");
      servo_set_angle(servo_angle);

      lcd_putc("\fFAN : ");
      lcd_putc(FAN ? "ON" : "OFF");
      lcd_gotoxy(1,2);
      printf(lcd_putc,"SRV:%d%c ",servo_angle,223);
      lcd_putc(buzzer_status ? "BZ:ON" : "BZ:OFF");
      servo_set_angle(servo_angle);
   }
}

// ------------------- DHT11 Functions -------------------
short dht11_read_data(unsigned int8 *data) {
   unsigned int8 i;
   dht11_start();
   if(!dht11_check_response()) return 0;
   for(i=0;i<5;i++) data[i]=dht11_read_byte();
   if(data[4] != ((data[0]+data[1]+data[2]+data[3]) & 0xFF)) return 0;
   return 1;
}

void dht11_start() {
   output_drive(DHT11_PIN);
   output_low(DHT11_PIN);
   delay_ms(20);
   output_high(DHT11_PIN);
   delay_us(30);
   set_tris_c(0x01);
}

int1 dht11_check_response() {
   delay_us(40);
   if(!input(DHT11_PIN)) {
      delay_us(80);
      if(input(DHT11_PIN)) { delay_us(40); return 1; }
   }
   return 0;
}

unsigned int8 dht11_read_byte() {
   unsigned int8 i, data=0;
   for(i=0;i<8;i++) {
      while(!input(DHT11_PIN));
      delay_us(30);
      if(input(DHT11_PIN)) data=(data<<1)|1;
      else data=(data<<1);
      while(input(DHT11_PIN));
   }
   return data;
}
